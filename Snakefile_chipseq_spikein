configfile: 'config.yaml'

from metaparser.bclmetaparser import BclMetaParser
from metaparser.dirbuilder import DirBuilder
from metaparser.argosmetaparser import ArgosMetaParser
from metaparser.metaconf import ArgosTools
from metaparser.metaconf import *
from metaparser.tornadostrategyparser import TornadoStrategyParser
from metaparser.genomeannotationsparser import GenomeAnnotationsParser
from metaparser.sampleparser import SampleParser
from fileio.fileutil import FileUtil
from tool.fastqc import Fastqc
#from tool.permutationtool import PermutationTool
from tool.bedtools_intersect_writer import IntersectWriter
import yaml
from datetime import datetime


# Dataset name and ref genome are passed as parameters when snakemake is called
dataset = config['dataset']
ref_genome = config['ref_genome']

# Setting up the default command line arguments for bedtools_intersect depending on 
# the given ref_genome 
enhancers = config['enhancers']
gene_spans = config['gene_spans']
tss_spans = config['tss_spans']
blacklist = config['blacklist']


# Creating all the diretories for snakemake rules
dirs = DirBuilder(dataset)
#dirs.build_bclfastq_dirs()

dirs.build_chipseq_spikein_dirs(ref_genome)

# Getting samples associated with specified dataset (all the samples from sample.yaml)
sample_parser = SampleParser()
sample_parser.get_sample_list(dataset)
sample = sample_parser.sample_list

dataset_dir = dirs.dataset_dir

# STAR
# The start point of the RNAseq pipeline, first step is to run STAR
merged_fastq_dir = dirs.merged_fastq_dir[:-1]
config['merged_fastq_dir'] = merged_fastq_dir


project_path = dirs.project_path[:-1] # project root directory, within this dir, there are FASTQ, STAR, etc.
fastq_dir = dirs.fastq_dir
fastq_dataset_dir = dirs.fastq_dataset_dir[:-1] # specified dataset dir in FASTQ dir, sample to STAR, etc.
config['fastq_dataset_dir'] = fastq_dataset_dir

star_dir = dirs.star_dir
config['star_dir'] = star_dir
star_dataset_dir = dirs.star_dataset_dir[:-1]
config['star_dataset_dir'] = star_dataset_dir
sorted_bam_dir = dirs.sorted_bam_dir[:-1]
config['sorted_bam_dir'] = sorted_bam_dir
sorted_bam_dataset_dir = dirs.sorted_bam_dataset_dir[:-1]
config['sorted_bam_dataset_dir'] = sorted_bam_dataset_dir
starindex_ercc = dirs.starindex_ercc
gtf = dirs.gtf


# PICARD
rmdup_bam_dir = dirs.rmdup_bam_dir[:-1]
config['rmdup_bam_dir'] = rmdup_bam_dir
rmdup_bam_dataset_dir = dirs.rmdup_bam_dataset_dir[:-1]
config['rmdup_bam_dataset_dir'] = rmdup_bam_dataset_dir


# multiqc all
multiqc_all_root = dirs.multiqc_all_root
multiqc_all_dir = dirs.multiqc_all_dir

# bedtools summary 
date_today = datetime.today().strftime('%Y%m%d')
summary_file_name = dataset + '_bedtools_coverage_TSS_onepergene_signal_ratio_summarys-' + date_today + '.xlsx'
#summary_dir = dirs.bedtools_coverage_dataset_dir
summary_dir = '/mnt/storage/dept/pedonc/CPCT/projects/Leuk_mmNUP98-NSD1_MSK_VTP_EH-202006/bedtools_coverage/ChIPseq_221114_mm10/'
bedtools_summary_output = summary_dir + summary_file_name
print(bedtools_summary_output)


# Setting Shell script parameters wildcards
# STAR wildcards
alignMatesGapMax_param = 2000
alignIntronMax_param = 1
seedSearchStartLmax_param = 30
# run_igvtools wildcards
z_param = 7
e_param = 200
# MACS2
f_param = "BAMPE"
q_param = 0.01
slocal_param = 1500

# Argos tools
argos = ArgosMetaParser(ArgosTools.ARGOS_CONFIG_PATH.value)
argos_star = argos.set_tool(ArgosTools.STAR)
argos_picard = argos.set_tool(ArgosTools.PICARD)
argos_samtools = argos.set_tool(ArgosTools.SAMTOOLS)
argos_igvtools = argos.set_tool(ArgosTools.IGVTOOLS)
argos_htseq_count = argos.set_tool(ArgosTools.HTSEQ_COUNT)
argos_macs2 = argos.set_tool(ArgosTools.MACS2)
argos_bedtools = argos.set_tool(ArgosTools.BEDTOOLS)
argos_bamCoverage = argos.set_tool(ArgosTools.BAMCOVERAGE)
argos_multiqc = argos.set_tool_snakemake(ArgosTools.MULTIQC)




rule all:
                input:
                        expand("{sorted_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps.bam", sorted_bam_dataset_dir=sorted_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                        expand("{sorted_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps.bam.bai", sorted_bam_dataset_dir=sorted_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                        expand("{rmdup_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps_rmdup.bam", rmdup_bam_dataset_dir=rmdup_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                        expand("{rmdup_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps_rmdup.bam.bai", rmdup_bam_dataset_dir=rmdup_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                        expand("{rmdup_bam_dataset_dir}/samtools_stats/{sample}_{ref_genome}_sorted_readgps_rmdup_samtools_stats.txt", rmdup_bam_dataset_dir=rmdup_bam_dataset_dir, sample=sample, ref_genome=ref_genome), 
                        expand("{rmdup_bam_dataset_dir}/samtools_flagstat/{sample}_{ref_genome}_sorted_readgps_rmdup_samtools_flagstat.txt", rmdup_bam_dataset_dir=rmdup_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                        expand("{multiqc_all_dir}/{dataset}_multiqc.html", multiqc_all_dir=multiqc_all_dir, dataset=dataset),
                        expand("{bedtools_summary_output}", bedtools_summary_output=bedtools_summary_output)

                
rule runstar:
                input:
                        R1 = expand(config['fastq_dataset_dir'] + "/{{sample}}_R1_merged.fastq.gz"),
                        R2 = expand(config['fastq_dataset_dir'] + "/{{sample}}_R2_merged.fastq.gz")
                output:
                        "{sorted_bam_dataset_dir}/{sample}_{ref_genome}_Aligned.sortedByCoord.out.bam"
                threads: 4
                resources:
                        nodes = 10
                params:
                        sample = lambda wildcards: "{sample}"
                shell:
                        """
                                mkdir -p {star_dir}
                                mkdir -p {star_dataset_dir}/
                                {argos_star} --genomeDir {starindex_ercc} --sjdbGTFfile /mnt/storage/dept/pedonc/Reference/Drosophila_melanogaster_UCSC/starindex/genes.gtf --readFilesIn {input.R1} {input.R2} --outFileNamePrefix {star_dataset_dir}/{wildcards.sample}_{ref_genome}_ --twopassMode Basic --outReadsUnmapped None --runThreadN 4 --outFilterMultimapNmax 10 --outSAMstrandField intronMotif --outSAMunmapped Within --alignIntronMax {alignIntronMax_param} --alignEndsType EndToEnd --alignMatesGapMax {alignMatesGapMax_param} --outSAMtype BAM SortedByCoordinate --readFilesCommand zcat
                                mkdir -p {sorted_bam_dir}/
                                mkdir -p {sorted_bam_dataset_dir}/
                                mv {star_dataset_dir}/{wildcards.sample}_{ref_genome}_Aligned.sortedByCoord.out.bam {sorted_bam_dataset_dir}
                                rm -rf {star_dataset_dir}/{wildcards.sample}_{ref_genome}__STARgenome/
                                rm -rf {star_dataset_dir}/{wildcards.sample}_{ref_genome}__STARpass1/
                        """


rule runpicard_add_replace:
                input:
                    "{sorted_bam_dataset_dir}/{sample}_{ref_genome}_Aligned.sortedByCoord.out.bam"
                        
                output:
                    "{sorted_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps.bam"
                shell:
                        """
                            mkdir -p {project_path}/tmp/
                            {argos_picard} AddOrReplaceReadGroups I={input} O={output} RGLB=lib1 RGPL=illumina RGPU=unit1 RGSM=13 TMP_DIR={project_path}/tmp
                            
                        """

rule samtools_indexing:
                input:
                    "{sorted_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps.bam"
                output:
                    "{sorted_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps.bam.bai"
                shell:
                        """
                            {argos_samtools} index {input}
                        """ 

# renamed from runpicard_complexity, now both sorted and rmdup version of bam_qc have picard complexity included
# running qc steps, later using multiqc for merging all the results
rule run_sorted_bam_qc:
                input:
                    "{sorted_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps.bam"
                output:
                    R1 = "{sorted_bam_dataset_dir}/samtools_stats/{sample}_{ref_genome}_sorted_readgps_samtools_stats.txt",
                    R2 = "{sorted_bam_dataset_dir}/samtools_flagstat/{sample}_{ref_genome}_sorted_readgps_samtools_flagstat.txt",
                    R3 = "{sorted_bam_dataset_dir}/stats/{sample}_{ref_genome}_sorted_readgps_lib_complexity.txt"
                shell:
                        """
                            mkdir -p {sorted_bam_dataset_dir}/samtools_stats/
                            mkdir -p {sorted_bam_dataset_dir}/samtools_flagstat/
                            {argos_samtools} stats {input} > {output.R1}
                            {argos_samtools} flagstat {input} > {output.R2}
                            {argos_picard} EstimateLibraryComplexity I={input} O={output.R3} TMP_DIR={project_path}/tmp
                        """

                    
rule run_rmdup_bam_qc:
                input:
                    "{rmdup_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps_rmdup.bam"
                output:
                    R1 = "{rmdup_bam_dataset_dir}/samtools_stats/{sample}_{ref_genome}_sorted_readgps_rmdup_samtools_stats.txt",
                    R2 = "{rmdup_bam_dataset_dir}/samtools_flagstat/{sample}_{ref_genome}_sorted_readgps_rmdup_samtools_flagstat.txt",
                    R3 = "{rmdup_bam_dataset_dir}/stats/{sample}_{ref_genome}_sorted_readgps_rmdup_lib_complexity.txt"
                shell:
                        """
                            mkdir -p {rmdup_bam_dataset_dir}/stats/
                            mkdir -p {rmdup_bam_dataset_dir}/samtools_stats/
                            mkdir -p {rmdup_bam_dataset_dir}/samtools_flagstat/
                            {argos_samtools} stats {input} > {output.R1}
                            {argos_samtools} flagstat {input} > {output.R2}
                            {argos_picard} EstimateLibraryComplexity I={input} O={output.R3} TMP_DIR={project_path}/tmp
                        """ 

rule runpicard_rmdup:
                input:
                    expand(config['sorted_bam_dataset_dir'] + "/{{sample}}_{{ref_genome}}_sorted_readgps.bam")
                output:
                    "{rmdup_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps_rmdup.bam"
                shell:
                    """
                        mkdir -p {rmdup_bam_dir}/
                        mkdir -p {rmdup_bam_dataset_dir}/
                        mkdir -p {rmdup_bam_dataset_dir}/stats
                        {argos_picard} MarkDuplicates INPUT={input} OUTPUT={output} METRICS_FILE={wildcards.rmdup_bam_dataset_dir}/stats/{wildcards.sample}_{wildcards.ref_genome}_sorted_readgps_rmdup_info.txt REMOVE_DUPLICATES=true TMP_DIR={project_path}/tmp/

                    """

rule samtools_indexing_rmdup:
                input:
                    "{rmdup_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps_rmdup.bam"
                output:
                    "{rmdup_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps_rmdup.bam.bai"
                shell:
                        """
                            {argos_samtools} index {input}
                        """ 


rule multiqc_all:
            input:
                expand("{rmdup_bam_dataset_dir}/samtools_stats/{sample}_{ref_genome}_sorted_readgps_rmdup_samtools_stats.txt", rmdup_bam_dataset_dir=rmdup_bam_dataset_dir, sample=sample, ref_genome=ref_genome), 
                expand("{rmdup_bam_dataset_dir}/samtools_flagstat/{sample}_{ref_genome}_sorted_readgps_rmdup_samtools_flagstat.txt", rmdup_bam_dataset_dir=rmdup_bam_dataset_dir, sample=sample, ref_genome=ref_genome), 
                expand("{rmdup_bam_dataset_dir}/stats/{sample}_{ref_genome}_sorted_readgps_rmdup_lib_complexity.txt", rmdup_bam_dataset_dir=rmdup_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                expand("{sorted_bam_dataset_dir}/samtools_stats/{sample}_{ref_genome}_sorted_readgps_samtools_stats.txt", sorted_bam_dataset_dir=sorted_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                expand("{sorted_bam_dataset_dir}/samtools_flagstat/{sample}_{ref_genome}_sorted_readgps_samtools_flagstat.txt", sorted_bam_dataset_dir=sorted_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                expand("{sorted_bam_dataset_dir}/stats/{sample}_{ref_genome}_sorted_readgps_lib_complexity.txt", sorted_bam_dataset_dir=sorted_bam_dataset_dir, sample=sample, ref_genome=ref_genome)

            output:
                "{multiqc_all_dir}/{dataset}_multiqc.html"                
            shell:
                """
                    mkdir -p {multiqc_all_root}
                    mkdir -p {multiqc_all_dir}
                    {argos_multiqc} {project_path}/*/{dataset}_{ref_genome} -n {dataset}_multiqc -o {multiqc_all_dir}
                """

'''
rule parse_flagstat:
            input:
                expand("{rmdup_bam_dataset_dir}/samtools_flagstat/{sample}_{ref_genome}_sorted_readgps_rmdup_samtools_flagstat.txt", rmdup_bam_dataset_dir=rmdup_bam_dataset_dir, sample=sample, ref_genome=ref_genome)
            output:
                "{multiqc_all_dir}/summary.txt"
            shell:
                """
                    /mnt/storage/dept/pedonc/src/miniconda2/envs/snakemake/bin/python tool/samtools_flagstat.py -fi {rmdup_bam_dataset_dir}/samtools_flagstat/sample_{ref_genome}_sorted_readgps_rmdup_samtools_flagstat.txt -fo {multiqc_all_dir}/summary.txt -s {sample} 
                """
'''

rule bedtools_summary_reads_fly:
            input:
                expand("{multiqc_all_dir}/{dataset}_multiqc.html", multiqc_all_dir=multiqc_all_dir, dataset=dataset)
            output:
                #"{summary_dir}/{dataset}_bedtools_coverage_TSS_onepergene_signal_ratio_summarys-{date_today}.xlsx"
                {bedtools_summary_output}

            shell:
                """ 
                    /mnt/storage/dept/pedonc/src/miniconda2/envs/snakemake/bin/python tool/bedtools_summary.py -d {dataset} -norm reads_fly -ref mm10
                """ 
