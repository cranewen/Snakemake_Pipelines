configfile: 'config.yaml'

import re
from collections import defaultdict
from metaparser.bclmetaparser import BclMetaParser
from metaparser.dirbuilder import DirBuilder
from metaparser.argosmetaparser import ArgosMetaParser
from metaparser.metaconf import ArgosTools
from metaparser.metaconf import *
from metaparser.tornadostrategyparser import TornadoStrategyParser
from metaparser.genomeannotationsparser import GenomeAnnotationsParser
from metaparser.sampleparser import SampleParser
from metaparser.chipseqdownsampleparser import ChipseqDownsampleParser
from fileio.fileutil import FileUtil
from tool.fastqc import Fastqc
#from tool.permutationtool import PermutationTool
from tool.bedtools_intersect_writer import IntersectWriter
import yaml


# Dataset name and ref genome are passed as parameters when snakemake is called
dataset = config['dataset']
ref_genome = config['ref_genome']

# Setting up the default command line arguments for bedtools_intersect depending on 
# the given ref_genome 
enhancers = config['enhancers']
gene_spans = config['gene_spans']
tss_spans = config['tss_spans']
blacklist = config['blacklist']

# down_sample variables
ds_method = config['downsample_method']
print(f'downsample method ======= {ds_method}')
chip_downsample_parser = ChipseqDownsampleParser(dataset)
chipseq_downsample_meta = chip_downsample_parser.get_chipseq_downsample_meta()


# Creating all the diretories for snakemake rules
dirs = DirBuilder(dataset)
dirs.build_bclfastq_dirs()

dirs.build_chipseq_dirs(ref_genome)

# Getting samples associated with specified dataset (all the samples from sample.yaml)
sample_parser = SampleParser()
sample_parser.get_sample_list(dataset)
sample = sample_parser.sample_list

dataset_dir = dirs.dataset_dir

# STAR
# The start point of the RNAseq pipeline, first step is to run STAR
merged_fastq_dir = dirs.merged_fastq_dir[:-1]
config['merged_fastq_dir'] = merged_fastq_dir


project_path = dirs.project_path[:-1] # project root directory, within this dir, there are FASTQ, STAR, etc.
fastq_dir = dirs.fastq_dir
fastq_dataset_dir = dirs.fastq_dataset_dir[:-1] # specified dataset dir in FASTQ dir, sample to STAR, etc.
config['fastq_dataset_dir'] = fastq_dataset_dir

star_dir = dirs.star_dir
config['star_dir'] = star_dir
star_dataset_dir = dirs.star_dataset_dir[:-1]
config['star_dataset_dir'] = star_dataset_dir
sorted_bam_dir = dirs.sorted_bam_dir[:-1]
config['sorted_bam_dir'] = sorted_bam_dir
sorted_bam_dataset_dir = dirs.sorted_bam_dataset_dir[:-1]
config['sorted_bam_dataset_dir'] = sorted_bam_dataset_dir
starindex_ercc = dirs.starindex_ercc
gtf = dirs.gtf


# PICARD
rmdup_bam_dir = dirs.rmdup_bam_dir[:-1]
config['rmdup_bam_dir'] = rmdup_bam_dir
rmdup_bam_dataset_dir = dirs.rmdup_bam_dataset_dir[:-1]
config['rmdup_bam_dataset_dir'] = rmdup_bam_dataset_dir

# HTSEQ-COUNT
counts_rmdup_dir = dirs.counts_rmdup_dir
counts_sorted_dir = dirs.counts_sorted_dir

# IGVtools
tdf_dataset_rmdup_dir = dirs.tdf_dataset_rmdup_dir
tdf_dataset_sorted_dir = dirs.tdf_dataset_sorted_dir
wig_dataset_rmdup_dir = dirs.wig_dataset_rmdup_dir
wig_dataset_sorted_dir = dirs.wig_dataset_sorted_dir

# MACS2
sample_parser.get_sample_input_dict(dataset)
sample_no_input = sample_parser.sample_no_input_list
sample_dict = sample_parser.sample_input_dict

macs2_dir = dirs.macs2_dir
macs2_dataset_dir = dirs.macs2_dataset_dir[:-1]

# bedtools_coverage
bedtools_coverage_dir = dirs.bedtools_coverage_dir
bedtools_coverage_dataset_rmdup_dir = dirs.bedtools_coverage_dataset_rmdup_dir

bedtools_chrNameLength = dirs.bedtools_chrNameLength
#print(bedtools_chrNameLength)
bedtools_tss_1k_2kbuff_bed_ref = dirs.bedtools_tss_1k_2kbuff_bed_ref
macs2_ref_genome = dirs.macs2_ref_genome

config['bedtools_coverage_dataset_rmdup_dir'] = bedtools_coverage_dataset_rmdup_dir

# bedtools_intersect
bedtools_intersect_dir = dirs.bedtools_intersect_dir
bedtools_intersect_input_dir = dirs.bedtools_intersect_input_dir
bedtools_intersect_dataset_rmdup_dir = dirs.bedtools_intersect_dataset_rmdup_dir[:-1]


# bamCoverage
bigwig_dir = dirs.bigwig_dir
bigwig_sorted_dataset_dir = dirs.bigwig_sorted_dataset_dir
bigwig_rmdup_dataset_dir = dirs.bigwig_rmdup_dataset_dir

# Argos tools
argos = ArgosMetaParser(ArgosTools.ARGOS_CONFIG_PATH.value)
argos_star = argos.set_tool(ArgosTools.STAR)
argos_picard = argos.set_tool(ArgosTools.PICARD)
argos_samtools = argos.set_tool(ArgosTools.SAMTOOLS)
argos_igvtools = argos.set_tool(ArgosTools.IGVTOOLS)
argos_htseq_count = argos.set_tool(ArgosTools.HTSEQ_COUNT)
argos_macs2 = argos.set_tool(ArgosTools.MACS2)
argos_bedtools = argos.set_tool(ArgosTools.BEDTOOLS)
argos_bamCoverage = argos.set_tool(ArgosTools.BAMCOVERAGE)
argos_multiqc = argos.set_tool_snakemake(ArgosTools.MULTIQC)

ds_method_dict = {'a': 'ds_a', 'b': 'ds_b', 'r': 'ds_r'}
ds_method_meta = chip_downsample_parser.get_meta_by_method(ds_method)
print(f'ds_method_meta:========== {ds_method_meta}')
down_sample_dict = defaultdict()
down_sample_list = []
ds_name_insert = defaultdict()
temp = []

for k,v in ds_method_meta.items():
    down_sample_dict[k + '_' + v['name']] = k
    down_sample_list.append(k + '_' + v['name'])
    temp.append(v['name'])
    ds_name_insert[k] = v['name']

print(f'down_sample_dict ==============: {down_sample_dict}')
print(f'down_sample_list ==============: {down_sample_list}')
print(f'temp ==============: {temp}')
print(f'ds_name_insert ==============: {ds_name_insert}')

print(f'rmdup_bam_dataset_dir : ===========> {rmdup_bam_dataset_dir}')

def getDownsampledBamNames():
    downsampledBams = list()
    for ds_sample_name in down_sample_dict.keys():
        downsampledBams.append(rmdup_bam_dataset_dir + "/" + ds_sample_name + "_" + ref_genome + "_sorted_readgps_rmdup.bam")

    return downsampledBams

def getDownsampledBamIndexNames():
    downsampledBamIndexes = list()
    for ds_sample_name in down_sample_dict.keys():
        downsampledBamIndexes.append(rmdup_bam_dataset_dir + "/" + ds_sample_name + "_" + ref_genome + "_sorted_readgps_rmdup.bam.bai")

    return downsampledBamIndexes

ds_bams = getDownsampledBamIndexNames()

print(f'ds_bams: =========> {ds_bams}')

wildcard_constraints:
    sample = ".+_\d+_[A-Z]+_S\d+",
    ref_genome = "[a-zA-Z][a-zA-Z][0-9]+",
    ds_code = "ds_(a|b|r)_[0-9]+\.[0-9]M"
    
rule all:
                input:
                    getDownsampledBamNames(),
                    getDownsampledBamIndexNames()

                
rule down_sample_rmdup:
                input:
                    "{rmdup_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps_rmdup.bam"
                output:
                    "{rmdup_bam_dataset_dir}/downsample/{sample}_{ds_code}_{ref_genome}_sorted_readgps_rmdup.bam"
        
                params:
                    f = lambda sample: ds_method_meta[sample.sample]['frac']
                    
                shell:
                        """
                            mkdir -p {rmdup_bam_dataset_dir}/downsample
                            {argos_samtools} view -bs {params.f} {input} > {output} 
                        """
                
rule samtools_indexing_rmdup_ds:
                input:
                    "{rmdup_bam_dataset_dir}/downsample/{sample}_{ds_code}_{ref_genome}_sorted_readgps_rmdup.bam"
                output:
                    "{rmdup_bam_dataset_dir}/downsample/{sample}_{ds_code}_{ref_genome}_sorted_readgps_rmdup.bam.bai"
                shell:
                        """
                            {argos_samtools} index {input}
                        """ 

rule move_downsampled_bams:
                input:
                    in_bam="{rmdup_bam_dataset_dir}/downsample/{sample}_{ds_code}_{ref_genome}_sorted_readgps_rmdup.bam",
                    in_index="{rmdup_bam_dataset_dir}/downsample/{sample}_{ds_code}_{ref_genome}_sorted_readgps_rmdup.bam.bai"
                output:
                    out_bam="{rmdup_bam_dataset_dir}/{sample}_{ds_code}_{ref_genome}_sorted_readgps_rmdup.bam",
                    out_index="{rmdup_bam_dataset_dir}/{sample}_{ds_code}_{ref_genome}_sorted_readgps_rmdup.bam.bai"
                shell:
                        """
                            mv {input.in_bam} {output.out_bam}
                            mv {input.in_index} {output.out_index}
                        """ 

