from metaparser.bclmetaparser import BclMetaParser
from metaparser.dirbuilder import DirBuilder
from metaparser.argosmetaparser import ArgosMetaParser
from metaparser.metaconf import ArgosTools
from metaparser.sampleparser import SampleParser
from tool.fastqc import Fastqc
import yaml

# Dataset name and ref genome are passed as parameters when snakemake is called
dataset = config['dataset']
ref_genome = config['ref_genome']

# Creating all the diretories for snakemake rules
dirs = DirBuilder(dataset)
dirs.build_bclfastq_dirs()

dirs.build_rnaseq_dirs(ref_genome)

# Find all samples associated with specified dataset
sample_parser = SampleParser()
sample_parser.get_sample_list(dataset)
sample = sample_parser.sample_list

dataset_dir = dirs.dataset_dir

# STAR
# The start point of the RNAseq pipeline, first step is to run STAR
merged_fastq_dir = dirs.merged_fastq_dir[:-1]
config['merged_fastq_dir'] = merged_fastq_dir

project_path = dirs.project_path[:-1] # project root directory, within this dir, there are FASTQ, STAR, etc.
fastq_dir = dirs.fastq_dir
fastq_dataset_dir = dirs.fastq_dataset_dir[:-1] # specified dataset dir in FASTQ dir, sample to STAR, etc.
config['fastq_dataset_dir'] = fastq_dataset_dir

star_dir = dirs.star_dir
config['star_dir'] = star_dir
star_dataset_dir = dirs.star_dataset_dir[:-1]
config['star_dataset_dir'] = star_dataset_dir
sorted_bam_dir = dirs.sorted_bam_dir[:-1]
config['sorted_bam_dir'] = sorted_bam_dir
sorted_bam_dataset_dir = dirs.sorted_bam_dataset_dir[:-1]
config['sorted_bam_dataset_dir'] = sorted_bam_dataset_dir
starindex_ercc = dirs.starindex_ercc
gtf = dirs.gtf

# PICARD
# Getting all the picard variables ready
rmdup_bam_dir = dirs.rmdup_bam_dir[:-1]
config['rmdup_bam_dir'] = rmdup_bam_dir
rmdup_bam_dataset_dir = dirs.rmdup_bam_dataset_dir[:-1]
config['rmdup_bam_dataset_dir'] = rmdup_bam_dataset_dir

# HTSEQ-COUNT
counts_rmdup_dir = dirs.counts_rmdup_dir
counts_sorted_dir = dirs.counts_sorted_dir

# IGVtools
tdf_dataset_rmdup_dir = dirs.tdf_dataset_rmdup_dir
tdf_dataset_sorted_dir = dirs.tdf_dataset_sorted_dir
wig_dataset_rmdup_dir = dirs.wig_dataset_rmdup_dir
wig_dataset_sorted_dir = dirs.wig_dataset_sorted_dir

# multiqc all
multiqc_all_root = dirs.multiqc_all_root
multiqc_all_dir = dirs.multiqc_all_dir


# Setting Shell script parameters
# STAR
chimSegmentMin_param = 12 
chimJunctionOverhangMin_param = 8 
chimOutJunctionFormat_param = 1 
alignSJDBoverhangMin_param = 10 
alignIntronMax_param = 100000 
alignMatesGapMax_param = 100000 
alignSJstitchMismatchNmax_1 = 5  
alignSJstitchMismatchNmax_2 = -1
alignSJstitchMismatchNmax_3 = 5 
alignSJstitchMismatchNmax_4 = 5
chimScoreJunctionNonGTAG_param = -4 
chimNonchimScoreDropMin_param = 10 
alignSplicedMateMapLminOverLmate_param = 0 
alignSplicedMateMapLmin_param = 30 
# run_igvtools
z_param = 7
e_param = 200

# Setting up all the tools
argos = ArgosMetaParser(ArgosTools.ARGOS_CONFIG_PATH.value)
argos_star = argos.set_tool(ArgosTools.STAR)
argos_picard = argos.set_tool(ArgosTools.PICARD)
argos_samtools = argos.set_tool(ArgosTools.SAMTOOLS)
argos_igvtools = argos.set_tool(ArgosTools.IGVTOOLS)
argos_htseq_count = argos.set_tool(ArgosTools.HTSEQ_COUNT)
argos_multiqc = argos.set_tool_snakemake(ArgosTools.MULTIQC)

rule all:
                input:
                        expand("{sorted_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps.bam", sorted_bam_dataset_dir=sorted_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                        expand("{sorted_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps.bam.bai", sorted_bam_dataset_dir=sorted_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                        expand("{rmdup_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps_rmdup.bam", rmdup_bam_dataset_dir=rmdup_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                        expand("{rmdup_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps_rmdup.bam.bai", rmdup_bam_dataset_dir=rmdup_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                        expand("{counts_sorted_dir}/{sample}_{ref_genome}_sorted_readgps_counts.txt", counts_sorted_dir=counts_sorted_dir, sample=sample, ref_genome=ref_genome),
                        expand("{counts_rmdup_dir}/{sample}_{ref_genome}_sorted_readgps_rmdup_counts.txt", counts_rmdup_dir=counts_rmdup_dir, sample=sample, ref_genome=ref_genome),
                        expand("{tdf_dataset_rmdup_dir}/{sample}_{ref_genome}_rmdup.tdf", tdf_dataset_rmdup_dir=tdf_dataset_rmdup_dir, sample=sample, ref_genome=ref_genome),
                        expand("{tdf_dataset_sorted_dir}/{sample}_{ref_genome}_sorted.tdf", tdf_dataset_sorted_dir=tdf_dataset_sorted_dir, sample=sample, ref_genome=ref_genome),
                        expand("{wig_dataset_rmdup_dir}/{sample}_{ref_genome}_rmdup.wig", wig_dataset_rmdup_dir=wig_dataset_rmdup_dir, sample=sample, ref_genome=ref_genome),
                        expand("{wig_dataset_sorted_dir}/{sample}_{ref_genome}_sorted.wig", wig_dataset_sorted_dir=wig_dataset_sorted_dir, sample=sample, ref_genome=ref_genome),
                        expand("{sorted_bam_dataset_dir}/samtools_stats/{sample}_{ref_genome}_sorted_readgps_samtools_stats.txt", sorted_bam_dataset_dir=sorted_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                        expand("{sorted_bam_dataset_dir}/samtools_flagstat/{sample}_{ref_genome}_sorted_readgps_samtools_flagstat.txt", sorted_bam_dataset_dir=sorted_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                        expand("{sorted_bam_dataset_dir}/stats/{sample}_{ref_genome}_sorted_readgps_lib_complexity.txt", sorted_bam_dataset_dir=sorted_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                        expand("{rmdup_bam_dataset_dir}/samtools_stats/{sample}_{ref_genome}_sorted_readgps_rmdup_samtools_stats.txt", rmdup_bam_dataset_dir=rmdup_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                        expand("{rmdup_bam_dataset_dir}/samtools_flagstat/{sample}_{ref_genome}_sorted_readgps_rmdup_samtools_flagstat.txt", rmdup_bam_dataset_dir=rmdup_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                        expand("{rmdup_bam_dataset_dir}/stats/{sample}_{ref_genome}_sorted_readgps_rmdup_lib_complexity.txt", rmdup_bam_dataset_dir=rmdup_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                        expand("{multiqc_all_dir}/{dataset}_multiqc.html", multiqc_all_dir=multiqc_all_dir, dataset=dataset)


rule movefastqs:
                input:
                        R1 = expand("{merged_fastq_dir}/{sample}_R1_merged.fastq.gz", sample=sample, merged_fastq_dir=merged_fastq_dir),
                        R2 = expand("{merged_fastq_dir}/{sample}_R2_merged.fastq.gz", sample=sample, merged_fastq_dir=merged_fastq_dir)
                output:
                        R1 = expand("{fastq_dataset_dir}/{sample}_R1_merged.fastq.gz", sample=sample, fastq_dataset_dir=fastq_dataset_dir),
                        R2 = expand("{fastq_dataset_dir}/{sample}_R2_merged.fastq.gz", sample=sample, fastq_dataset_dir=fastq_dataset_dir)
                shell:
                        """
                                mkdir -p {fastq_dataset_dir}
                                cp {input.R1} {fastq_dataset_dir}
                                cp {input.R2} {fastq_dataset_dir}
                        """

rule runstar:
                input:
                        R1 = expand(config['fastq_dataset_dir'] + "/{{sample}}_R1_merged.fastq.gz"),
                        R2 = expand(config['fastq_dataset_dir'] + "/{{sample}}_R2_merged.fastq.gz")
                output:
                        "{sorted_bam_dataset_dir}/{sample}_{ref_genome}_Aligned.sortedByCoord.out.bam"
                threads: 4
                resources:
                        nodes = 10
                params:
                        sample = lambda wildcards: "{sample}"
                shell:
                        """
                                mkdir -p {star_dir}
                                mkdir -p {star_dataset_dir}/
                                {argos_star} --genomeDir {starindex_ercc} --sjdbGTFfile {gtf} --readFilesIn {input.R1} {input.R2} --outFileNamePrefix {star_dataset_dir}/{wildcards.sample}_{ref_genome}_ --twopassMode Basic --outReadsUnmapped None --runThreadN 4 --outSAMstrandField intronMotif --outSAMunmapped Within --chimSegmentMin {chimSegmentMin_param} --chimJunctionOverhangMin {chimJunctionOverhangMin_param} --chimOutType Junctions WithinBAM --chimOutJunctionFormat {chimOutJunctionFormat_param} --alignSJDBoverhangMin {alignSJDBoverhangMin_param} alignIntronMax {alignIntronMax_param} --alignMatesGapMax {alignMatesGapMax_param} --alignSJstitchMismatchNmax {alignSJstitchMismatchNmax_1} {alignSJstitchMismatchNmax_2} {alignSJstitchMismatchNmax_3} {alignSJstitchMismatchNmax_4} --chimScoreJunctionNonGTAG {chimScoreJunctionNonGTAG_param} --chimNonchimScoreDropMin {chimNonchimScoreDropMin_param} --alignInsertionFlush Right --alignSplicedMateMapLminOverLmate {alignSplicedMateMapLminOverLmate_param} --alignSplicedMateMapLmin {alignSplicedMateMapLmin_param} --outSAMtype BAM SortedByCoordinate --readFilesCommand zcat
                                mkdir -p {sorted_bam_dir}/
                                mkdir -p {sorted_bam_dataset_dir}/
                                mv {star_dataset_dir}/{wildcards.sample}_{ref_genome}_Aligned.sortedByCoord.out.bam {sorted_bam_dataset_dir}
                                rm -rf {star_dataset_dir}/{wildcards.sample}_{ref_genome}__STARgenome/
                                rm -rf {star_dataset_dir}/{wildcards.sample}_{ref_genome}__STARpass1/
                        """

rule runpicard_add_replace:
                input:
                    "{sorted_bam_dataset_dir}/{sample}_{ref_genome}_Aligned.sortedByCoord.out.bam"
                        
                output:
                    "{sorted_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps.bam"
                shell:
                        """
                            mkdir -p {project_path}/tmp/
                            {argos_picard} AddOrReplaceReadGroups I={input} O={output} RGLB=lib1 RGPL=illumina RGPU=unit1 RGSM=13 TMP_DIR={project_path}/tmp
                            
                        """

rule samtools_indexing:
                input:
                    "{sorted_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps.bam"
                output:
                    "{sorted_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps.bam.bai"
                shell:
                        """
                            {argos_samtools} index {input}
                        """ 

rule run_sorted_bam_qc:
                input:
                    "{sorted_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps.bam"
                output:
                    R1 = "{sorted_bam_dataset_dir}/samtools_stats/{sample}_{ref_genome}_sorted_readgps_samtools_stats.txt",
                    R2 = "{sorted_bam_dataset_dir}/samtools_flagstat/{sample}_{ref_genome}_sorted_readgps_samtools_flagstat.txt",
                    R3 = "{sorted_bam_dataset_dir}/stats/{sample}_{ref_genome}_sorted_readgps_lib_complexity.txt"
                shell:
                        """
                            mkdir -p {sorted_bam_dataset_dir}/samtools_stats/
                            mkdir -p {sorted_bam_dataset_dir}/samtools_flagstat/
                            {argos_samtools} stats {input} > {output.R1}
                            {argos_samtools} flagstat {input} > {output.R2}
                            {argos_picard} EstimateLibraryComplexity I={input} O={output.R3} TMP_DIR={project_path}/tmp
                        """


rule runpicard_rmdup:
                input:
                    expand(config['sorted_bam_dataset_dir'] + "/{{sample}}_{{ref_genome}}_sorted_readgps.bam")
                output:
                    "{rmdup_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps_rmdup.bam"
                shell:
                    """
                        mkdir -p {rmdup_bam_dir}/
                        mkdir -p {rmdup_bam_dataset_dir}/
                        mkdir -p {rmdup_bam_dataset_dir}/stats
                        {argos_picard} MarkDuplicates INPUT={input} OUTPUT={output} METRICS_FILE={wildcards.rmdup_bam_dataset_dir}/stats/{wildcards.sample}_{wildcards.ref_genome}_sorted_readgps_rmdup_info.txt REMOVE_DUPLICATES=true TMP_DIR={project_path}/tmp/

                    """

rule samtools_indexing_rmdup:
                input:
                    "{rmdup_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps_rmdup.bam"
                output:
                    "{rmdup_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps_rmdup.bam.bai"
                shell:
                        """
                            {argos_samtools} index {input}
                        """ 

rule run_rmdup_bam_qc:
                input:
                    "{rmdup_bam_dataset_dir}/{sample}_{ref_genome}_sorted_readgps_rmdup.bam"
                output:
                    R1 = "{rmdup_bam_dataset_dir}/samtools_stats/{sample}_{ref_genome}_sorted_readgps_rmdup_samtools_stats.txt",
                    R2 = "{rmdup_bam_dataset_dir}/samtools_flagstat/{sample}_{ref_genome}_sorted_readgps_rmdup_samtools_flagstat.txt",
                    R3 = "{rmdup_bam_dataset_dir}/stats/{sample}_{ref_genome}_sorted_readgps_rmdup_lib_complexity.txt"
                shell:
                    """
                        mkdir -p {rmdup_bam_dataset_dir}/stats/
                        mkdir -p {rmdup_bam_dataset_dir}/samtools_stats/
                        mkdir -p {rmdup_bam_dataset_dir}/samtools_flagstat/
                        {argos_samtools} stats {input} > {output.R1}
                        {argos_samtools} flagstat {input} > {output.R2}
                        {argos_picard} EstimateLibraryComplexity I={input} O={output.R3} TMP_DIR={project_path}/tmp
                    """

rule run_htseq_count_bam:
                input:
                    expand(config['sorted_bam_dataset_dir'] + "/{{sample}}_{{ref_genome}}_sorted_readgps.bam")
                output:
                    counts = "{counts_sorted_dir}/{sample}_{ref_genome}_sorted_readgps_counts.txt",
                #group:
                #    "htseq_count"
                shell:
                    """
                        mkdir -p {project_path}/counts/
                        mkdir -p {project_path}/counts/{dataset}_{ref_genome}/
                        mkdir -p {project_path}/counts/{dataset}_{ref_genome}/sorted/
                        {argos_htseq_count} -f bam --stranded=no --order=pos {input} {gtf} > {output}
                        
                    """

rule run_htseq_count_rmdup_bam:
                input:
                    expand(config['rmdup_bam_dataset_dir'] + "/{{sample}}_{{ref_genome}}_sorted_readgps_rmdup.bam")
                output:
                    rmdup_counts = "{counts_rmdup_dir}/{sample}_{ref_genome}_sorted_readgps_rmdup_counts.txt"
                #group:
                #    "htseq_count"
                shell:
                    """
                        mkdir -p {project_path}/counts/
                        mkdir -p {project_path}/counts/{dataset}_{ref_genome}/
                        mkdir -p {project_path}/counts/{dataset}_{ref_genome}/sorted_rmdup/
                        {argos_htseq_count} -f bam --stranded=no --order=pos {input} {gtf} > {output}
                        
                    """
                        
rule run_igvtools_rmdup_tdf:
                input:
                    expand(config['rmdup_bam_dataset_dir'] + "/{{sample}}_{{ref_genome}}_sorted_readgps_rmdup.bam")
                output:
                    "{tdf_dataset_rmdup_dir}/{sample}_{ref_genome}_rmdup.tdf",
                #group:
                #    "igvtools"
                shell:
                        """
                            mkdir -p {project_path}/TDF/
                            mkdir -p {project_path}/TDF/{dataset}_{ref_genome}/
                            mkdir -p {project_path}/TDF/{dataset}_{ref_genome}/sorted_rmdup/
                            
                            {argos_igvtools} -Djava.util.prefs.userRoot=/mnt/storage/dept/pedonc/.java/uprefs count -z {z_param} -e {e_param} {input} {output} {ref_genome} 

                        """

rule run_igvtools_tdf:
                input:
                    expand(config['sorted_bam_dataset_dir'] + "/{{sample}}_{{ref_genome}}_sorted_readgps.bam")
                output:
                    "{tdf_dataset_sorted_dir}/{sample}_{ref_genome}_sorted.tdf",
                #group:
                #    "igvtools"
                shell:
                        """
                            mkdir -p {project_path}/TDF/
                            mkdir -p {project_path}/TDF/{dataset}_{ref_genome}/
                            mkdir -p {project_path}/TDF/{dataset}_{ref_genome}/sorted/
                            
                            {argos_igvtools} -Djava.util.prefs.userRoot=/mnt/storage/dept/pedonc/.java/uprefs count -z {z_param} -e {e_param} {input} {output} {ref_genome} 

                        """



rule run_igvtools_rmdup_wig:
                input:
                    expand(config['rmdup_bam_dataset_dir'] + "/{{sample}}_{{ref_genome}}_sorted_readgps_rmdup.bam")
                output:
                    "{wig_dataset_rmdup_dir}/{sample}_{ref_genome}_rmdup.wig"
                #group:
                #    "igvtools"
                shell:
                        """
                            mkdir -p {project_path}/WIG/
                            mkdir -p {project_path}/WIG/{dataset}_{ref_genome}/
                            mkdir -p {project_path}/WIG/{dataset}_{ref_genome}/sorted_rmdup/
                            
                            {argos_igvtools} -Djava.util.prefs.userRoot=/mnt/storage/dept/pedonc/.java/uprefs count -z {z_param} -e {e_param} {input} {output} {ref_genome} 

                        """

rule run_igvtools_wig:
                input:
                    expand(config['sorted_bam_dataset_dir'] + "/{{sample}}_{{ref_genome}}_sorted_readgps.bam")
                output:
                    "{wig_dataset_sorted_dir}/{sample}_{ref_genome}_sorted.wig"
                #group:
                #    "igvtools"
                shell:
                        """
                            mkdir -p {project_path}/WIG/
                            mkdir -p {project_path}/WIG/{dataset}_{ref_genome}/
                            mkdir -p {project_path}/WIG/{dataset}_{ref_genome}/sorted/
                            
                            {argos_igvtools} -Djava.util.prefs.userRoot=/mnt/storage/dept/pedonc/.java/uprefs count -z {z_param} -e {e_param} {input} {output} {ref_genome} 

                        """


rule multiqc_all:
            input:
                expand("{sorted_bam_dataset_dir}/samtools_stats/{sample}_{ref_genome}_sorted_readgps_samtools_stats.txt", sorted_bam_dataset_dir=sorted_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                expand("{sorted_bam_dataset_dir}/samtools_flagstat/{sample}_{ref_genome}_sorted_readgps_samtools_flagstat.txt", sorted_bam_dataset_dir=sorted_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                expand("{sorted_bam_dataset_dir}/stats/{sample}_{ref_genome}_sorted_readgps_lib_complexity.txt", sorted_bam_dataset_dir=sorted_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                expand("{rmdup_bam_dataset_dir}/samtools_stats/{sample}_{ref_genome}_sorted_readgps_rmdup_samtools_stats.txt", rmdup_bam_dataset_dir=rmdup_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                expand("{rmdup_bam_dataset_dir}/samtools_flagstat/{sample}_{ref_genome}_sorted_readgps_rmdup_samtools_flagstat.txt", rmdup_bam_dataset_dir=rmdup_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                expand("{rmdup_bam_dataset_dir}/stats/{sample}_{ref_genome}_sorted_readgps_rmdup_lib_complexity.txt", rmdup_bam_dataset_dir=rmdup_bam_dataset_dir, sample=sample, ref_genome=ref_genome),
                expand("{counts_rmdup_dir}/{sample}_{ref_genome}_sorted_readgps_rmdup_counts.txt", counts_rmdup_dir=counts_rmdup_dir, sample=sample, ref_genome=ref_genome)
            output:
                "{multiqc_all_dir}/{dataset}_multiqc.html"
            shell:
                """
                    mkdir -p {multiqc_all_root}
                    mkdir -p {multiqc_all_dir}
                    {argos_multiqc} {project_path}/*/{dataset}_{ref_genome} -n {dataset}_multiqc -o {multiqc_all_dir}
                """

